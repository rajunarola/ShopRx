// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RxFair.Data.DbContext;

namespace RxFair.Data.Migrations
{
    [DbContext(typeof(RxFairDbContext))]
    [Migration("20190719041709_AddTagNBlogTagTable")]
    partial class AddTagNBlogTagTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole<long>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(50);

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(200);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserClaim<long>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<long>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RxFair.Data.DbContext.ApplicationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<long?>("DistributorId");

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(20);

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(30);

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<long?>("PharmacyId");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(12);

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(100);

                    b.Property<string>("UserProfileImage")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("DistributorId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PharmacyId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.AccessPage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("PageName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("AccessPage");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.AdvertiseEmailTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Template")
                        .IsRequired();

                    b.Property<string>("TemplateName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("AdvertiseEmailTemplate");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.Blog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AuthorId");

                    b.Property<long>("BlogCategoryId");

                    b.Property<DateTime>("BlogDate");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Descriptions")
                        .IsRequired();

                    b.Property<string>("InternalName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("RelatedBlogs");

                    b.Property<string>("Tags")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BlogCategoryId");

                    b.ToTable("Blog");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.BlogCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired();

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("BlogCategory");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.BlogImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BlogId");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ImageName")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("BlogImage");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.BlogTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BlogId");

                    b.Property<long>("BlogTagId");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("BlogTagId");

                    b.ToTable("BlogTags");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.CommissionHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ChargedMonthly")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("SubscriptionTypeId");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionTypeId");

                    b.ToTable("CommissionHistory");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.ContactDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Fax")
                        .HasMaxLength(15);

                    b.Property<bool>("IsActive");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("ContactDetails");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.ContactRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .HasMaxLength(50);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Message")
                        .IsRequired();

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("ContactRequest");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.Distributor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ContactAddress")
                        .HasMaxLength(100);

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("ContactMobile")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Phone")
                        .HasMaxLength(20);

                    b.Property<long>("StateId");

                    b.Property<long?>("UserId");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("Distributor");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.DistributorOrderSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("DistributorId");

                    b.Property<TimeSpan?>("FridayCutOffTime");

                    b.Property<bool>("IsActive");

                    b.Property<decimal>("MinOrderAmount")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<TimeSpan?>("MondayCutOffTime");

                    b.Property<decimal>("OverNightAmount")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<TimeSpan?>("SaturdayCutOffTime");

                    b.Property<bool>("ServiceDayFriday");

                    b.Property<bool>("ServiceDayMonday");

                    b.Property<bool>("ServiceDaySaturday");

                    b.Property<bool>("ServiceDaySunday");

                    b.Property<bool>("ServiceDayThursday");

                    b.Property<bool>("ServiceDayTuesday");

                    b.Property<bool>("ServiceDayWednesday");

                    b.Property<decimal>("ShippingCharge")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<TimeSpan?>("SundayCutOffTime");

                    b.Property<TimeSpan?>("ThursdayCutOffTime");

                    b.Property<long>("TimeZoneId");

                    b.Property<TimeSpan?>("TuesdayCutOffTime");

                    b.Property<TimeSpan?>("WednesdayCutOffTime");

                    b.HasKey("Id");

                    b.HasIndex("DistributorId")
                        .IsUnique();

                    b.HasIndex("TimeZoneId");

                    b.ToTable("DistributorOrderSetting");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.DistributorSubscription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("DistributorId");

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool>("IsActive");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Notes");

                    b.Property<DateTime>("StartDate");

                    b.Property<long>("SubscriptionTypeId");

                    b.HasKey("Id");

                    b.HasIndex("DistributorId");

                    b.HasIndex("SubscriptionTypeId");

                    b.ToTable("DistributorSubscription");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.DistributorSubscriptionHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("DistributorId");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsActive");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Notes");

                    b.Property<DateTime>("StartDate");

                    b.Property<long>("SubscriptionTypeId");

                    b.HasKey("Id");

                    b.HasIndex("DistributorId");

                    b.HasIndex("SubscriptionTypeId");

                    b.ToTable("DistributorSubscriptionHistory");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.DocumentMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DocumentFile")
                        .IsRequired();

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("DocumentType");

                    b.Property<bool>("IsActive");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("DocumentMaster");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.DosageFormMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DosageForm")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<bool>("IsActive");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("DosageFormMaster");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.ErrorLog", b =>
                {
                    b.Property<long>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LogDate");

                    b.Property<string>("Message");

                    b.Property<string>("Path");

                    b.Property<string>("Source");

                    b.Property<string>("Stack");

                    b.Property<string>("TargetSite");

                    b.Property<string>("Type");

                    b.HasKey("LogId");

                    b.ToTable("ErrorLog");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.FAQs", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .IsRequired();

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Question")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("FaQs");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.ManageAccessPagePermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("PagePermissionId");

                    b.Property<long>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("PagePermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("ManageAccessPagePermission");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.ManufacturerMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<string>("ManufacturerName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("ManufacturerMaster");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.Medicine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description");

                    b.Property<int?>("DrugDescriptorIdentifier")
                        .HasColumnName("Drug_Descriptor_Identifier");

                    b.Property<string>("GenericProductIdentifier")
                        .HasColumnName("Generic_Product_Identifier")
                        .HasMaxLength(14);

                    b.Property<string>("GenericProductPackagingCode")
                        .HasColumnName("Generic_Product_Packaging_Code")
                        .HasMaxLength(8);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsNdc")
                        .HasColumnName("IsNDC");

                    b.Property<long?>("LastChangeDate")
                        .HasColumnName("Last_Change_Date");

                    b.Property<string>("ManufacturersLabelerName")
                        .HasColumnName("Manufacturers_Labeler_Name")
                        .HasMaxLength(50);

                    b.Property<string>("MedicineImage")
                        .HasMaxLength(20);

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("NdcUpcHri")
                        .IsRequired()
                        .HasColumnName("NDC_UPC_HRI")
                        .HasMaxLength(11)
                        .IsUnicode(false);

                    b.Property<string>("NewNdcUpcHri")
                        .HasColumnName("New_NDC_UPC_HRI")
                        .HasMaxLength(11)
                        .IsUnicode(false);

                    b.Property<string>("OldNdcUpcHri")
                        .HasColumnName("Old_NDC_UPC_HRI")
                        .HasMaxLength(11)
                        .IsUnicode(false);

                    b.Property<string>("PackageDescriptionCode")
                        .HasColumnName("Package_Description_Code")
                        .HasMaxLength(2);

                    b.Property<int?>("PackageQuantity")
                        .HasColumnName("Package_Quantity");

                    b.Property<float?>("PackageSize")
                        .HasColumnName("Package_Size");

                    b.Property<string>("PackageSizeUnitOfMeasure")
                        .HasColumnName("Package_Size_Unit_of_Measure")
                        .HasMaxLength(2);

                    b.Property<string>("UnitDoseUnitOfUsePackage")
                        .HasColumnName("Unit_DoseUnit_of_Use_Package")
                        .HasMaxLength(1);

                    b.HasKey("Id");

                    b.ToTable("Medicine");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.MedicineCategoryMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<string>("MedicineCategory")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("MedicineCategoryMaster");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.MedicineDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandNameCode")
                        .HasColumnName("Brand_Name_Code")
                        .HasMaxLength(1);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DosageForm")
                        .HasColumnName("Dosage_Form")
                        .HasMaxLength(4);

                    b.Property<int?>("DrugDescriptorIdentifier")
                        .HasColumnName("Drug_Descriptor_Identifier");

                    b.Property<string>("DrugName")
                        .HasColumnName("Drug_Name")
                        .HasMaxLength(30);

                    b.Property<string>("GenericProductIdentifier")
                        .HasColumnName("Generic_Product_Identifier")
                        .HasMaxLength(14);

                    b.Property<bool>("IsActive");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Strength")
                        .HasMaxLength(15);

                    b.Property<string>("StrengthUnitOfMeasure")
                        .HasColumnName("Strength_Unit_of_Measure")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("MedicineDetails");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.MedicinePrices", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float?>("AwppackagePrice")
                        .HasColumnName("AWPPackage_Price");

                    b.Property<float?>("AwpunitPrice")
                        .HasColumnName("AWPUnit_Price");

                    b.Property<float?>("AwpunitPriceExtended")
                        .HasColumnName("AWPUnit_Price_Extended");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long?>("EffectiveDate")
                        .HasColumnName("Effective_Date");

                    b.Property<string>("GenericProductPackagingCode")
                        .HasColumnName("Generic_Product_Packaging_Code")
                        .HasMaxLength(8);

                    b.Property<string>("GppcPriceCode")
                        .HasColumnName("GPPC_Price_Code")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<float?>("GppcUnitPrice")
                        .HasColumnName("GPPC_Unit_Price");

                    b.Property<bool>("IsActive");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("NdcUpcHri")
                        .IsRequired()
                        .HasColumnName("NDC_UPC_HRI")
                        .HasMaxLength(11)
                        .IsUnicode(false);

                    b.Property<float?>("WacpackagePrice")
                        .HasColumnName("WACPackage_Price");

                    b.Property<float?>("WacunitPrice")
                        .HasColumnName("WACUnit_Price");

                    b.Property<float?>("WacunitPriceExtended")
                        .HasColumnName("WACUnit_Price_Extended");

                    b.HasKey("Id");

                    b.ToTable("MedicinePrices");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.NewDistributorRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ContactAddress")
                        .HasMaxLength(100);

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("ContactMobile")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Phone")
                        .HasMaxLength(20);

                    b.Property<long>("StateId");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("NewDistributorRequest");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.PagePermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AccessPageId");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("PermissionId");

                    b.Property<string>("PermissionName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AccessPageId");

                    b.HasIndex("PermissionId");

                    b.ToTable("PagePermission");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("PermissionOrder");

                    b.HasKey("Id");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.Pharmacy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("DeaExpires");

                    b.Property<string>("DeaFile")
                        .IsRequired();

                    b.Property<string>("DeaNumber")
                        .IsRequired()
                        .HasMaxLength(9);

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("LicenseExpires");

                    b.Property<string>("LicenseFile")
                        .IsRequired();

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("NpiNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PharmacyName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("PharmacySystemId");

                    b.Property<long>("PharmacyTypeId");

                    b.Property<string>("ReferCode");

                    b.Property<int>("Status");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PharmacySystemId");

                    b.HasIndex("PharmacyTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Pharmacy");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.PharmacyBillingAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .IsRequired();

                    b.Property<string>("Address2");

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("PharmacyId");

                    b.Property<long>("StateId");

                    b.Property<string>("ZipCode")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("StateId");

                    b.ToTable("PharmacyBillingAddress");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.PharmacyShippingAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .IsRequired();

                    b.Property<string>("Address2");

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("PharmacyId");

                    b.Property<long>("StateId");

                    b.Property<string>("ZipCode")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("StateId");

                    b.ToTable("PharmacyShippingAddress");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.PharmacySystemMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("PharmacySystemName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("PharmacySystemMaster");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.PharmacyTypeMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("PharmacyTypeName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("PharmacyTypeMaster");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.RewardMoneyMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<bool>("IsActive");

                    b.Property<decimal>("MaxRange")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("MinRange")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<decimal>("Referral")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<int>("RewardType");

                    b.HasKey("Id");

                    b.ToTable("RewardMoneyMaster");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.RewardTypeMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Type")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("RewardTypeMaster");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.State", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("State");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.SubscriptionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ChargedMonthly")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("SubscriptionTypeName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("SubscriptionType");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("TagName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.TermsAndCondition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("TermsCondition")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("TermsAndCondition");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.Testimonials", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Feedback")
                        .IsRequired();

                    b.Property<string>("Image");

                    b.Property<bool>("IsActive");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Testimonials");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.TimeZoneMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DaylightName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDaylight");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("StandardName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("UtcDaylightOffset")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("UtcStandardOffset")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("TimeZoneMaster");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.UserAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .HasMaxLength(256);

                    b.Property<string>("Address2")
                        .HasMaxLength(256);

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<long?>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long?>("StateId");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("StateId");

                    b.ToTable("UserAddresses");
                });

            modelBuilder.Entity("RxFair.Data.DbContext.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole<long>");

                    b.HasDiscriminator().HasValue("Role");
                });

            modelBuilder.Entity("RxFair.Data.DbContext.UserClaim", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>");

                    b.HasDiscriminator().HasValue("UserClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("RxFair.Data.DbContext.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("RxFair.Data.DbContext.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RxFair.Data.DbContext.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("RxFair.Data.DbContext.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RxFair.Data.DbContext.ApplicationUser", b =>
                {
                    b.HasOne("RxFair.Data.DbModel.Distributor", "Distributor")
                        .WithMany("DistributorUsers")
                        .HasForeignKey("DistributorId");

                    b.HasOne("RxFair.Data.DbModel.Pharmacy", "Pharmacy")
                        .WithMany("PharmacyUsers")
                        .HasForeignKey("PharmacyId");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.Blog", b =>
                {
                    b.HasOne("RxFair.Data.DbContext.ApplicationUser", "Author")
                        .WithMany("AuthorBlogs")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RxFair.Data.DbModel.BlogCategory", "BlogCategory")
                        .WithMany("Blogs")
                        .HasForeignKey("BlogCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RxFair.Data.DbModel.BlogImage", b =>
                {
                    b.HasOne("RxFair.Data.DbModel.Blog", "Blog")
                        .WithMany("BlogImages")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RxFair.Data.DbModel.BlogTag", b =>
                {
                    b.HasOne("RxFair.Data.DbModel.Blog", "Blog")
                        .WithMany("BlogTags")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RxFair.Data.DbModel.Tag", "Tag")
                        .WithMany("BlogTags")
                        .HasForeignKey("BlogTagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RxFair.Data.DbModel.CommissionHistory", b =>
                {
                    b.HasOne("RxFair.Data.DbModel.SubscriptionType", "SubscriptionType")
                        .WithMany("CommissionHistories")
                        .HasForeignKey("SubscriptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RxFair.Data.DbModel.Distributor", b =>
                {
                    b.HasOne("RxFair.Data.DbModel.State", "State")
                        .WithMany("Distributors")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RxFair.Data.DbContext.ApplicationUser", "DistributorAdminUser")
                        .WithMany("DistributorOwner")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("RxFair.Data.DbModel.DistributorOrderSetting", b =>
                {
                    b.HasOne("RxFair.Data.DbModel.Distributor", "Distributor")
                        .WithOne("DistributorOrderSettings")
                        .HasForeignKey("RxFair.Data.DbModel.DistributorOrderSetting", "DistributorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RxFair.Data.DbModel.TimeZoneMaster", "TimeZoneMaster")
                        .WithMany("DistributorOrderSettings")
                        .HasForeignKey("TimeZoneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RxFair.Data.DbModel.DistributorSubscription", b =>
                {
                    b.HasOne("RxFair.Data.DbModel.Distributor", "Distributor")
                        .WithMany("DistributorSubscriptions")
                        .HasForeignKey("DistributorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RxFair.Data.DbModel.SubscriptionType", "SubscriptionType")
                        .WithMany("DistributorSubscriptions")
                        .HasForeignKey("SubscriptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RxFair.Data.DbModel.DistributorSubscriptionHistory", b =>
                {
                    b.HasOne("RxFair.Data.DbModel.Distributor", "Distributor")
                        .WithMany()
                        .HasForeignKey("DistributorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RxFair.Data.DbModel.SubscriptionType", "SubscriptionType")
                        .WithMany()
                        .HasForeignKey("SubscriptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RxFair.Data.DbModel.ManageAccessPagePermission", b =>
                {
                    b.HasOne("RxFair.Data.DbModel.PagePermission", "PagePermission")
                        .WithMany("ManageAccessPagePermissions")
                        .HasForeignKey("PagePermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RxFair.Data.DbContext.Role", "Role")
                        .WithMany("ManageAccessPagePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RxFair.Data.DbModel.NewDistributorRequest", b =>
                {
                    b.HasOne("RxFair.Data.DbModel.State", "State")
                        .WithMany("NewDistributorRequests")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RxFair.Data.DbModel.PagePermission", b =>
                {
                    b.HasOne("RxFair.Data.DbModel.AccessPage", "AccessPage")
                        .WithMany("PagePermissions")
                        .HasForeignKey("AccessPageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RxFair.Data.DbModel.Permission", "Permission")
                        .WithMany("PagePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RxFair.Data.DbModel.Pharmacy", b =>
                {
                    b.HasOne("RxFair.Data.DbModel.PharmacySystemMaster", "PharmacySystemMaster")
                        .WithMany("Pharmacies")
                        .HasForeignKey("PharmacySystemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RxFair.Data.DbModel.PharmacyTypeMaster", "PharmacyTypeMaster")
                        .WithMany("Pharmacies")
                        .HasForeignKey("PharmacyTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RxFair.Data.DbContext.ApplicationUser", "PharmacyAdminUser")
                        .WithMany("PharmacyOwner")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RxFair.Data.DbModel.PharmacyBillingAddress", b =>
                {
                    b.HasOne("RxFair.Data.DbModel.Pharmacy", "Pharmacy")
                        .WithMany("BillingAddresses")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RxFair.Data.DbModel.State", "State")
                        .WithMany("PharmacyBillingAddresses")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RxFair.Data.DbModel.PharmacyShippingAddress", b =>
                {
                    b.HasOne("RxFair.Data.DbModel.Pharmacy", "Pharmacy")
                        .WithMany("ShippingAddresses")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RxFair.Data.DbModel.State", "State")
                        .WithMany("PharmacyShippingAddresses")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RxFair.Data.DbModel.UserAddress", b =>
                {
                    b.HasOne("RxFair.Data.DbContext.ApplicationUser", "User")
                        .WithMany("UserAddress")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("RxFair.Data.DbModel.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");
                });
#pragma warning restore 612, 618
        }
    }
}
