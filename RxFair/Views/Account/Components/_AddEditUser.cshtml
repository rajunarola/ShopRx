@using RxFair.Dto.Enum
@using RxFair.Utility.Extension
@model RxFair.Dto.Dtos.UserBasicInfo
@{
    Layout = null;
}

<div class="modal-header">
    <h5 class="modal-title" id="exampleModalLabel">@(Model.Id == 0 ? "Add" : "Edit") @ViewBag.GroupName User</h5>
    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
        <span aria-hidden="true">&times;</span>
    </button>
</div>
<div class="modal-body">
    <div class="accordian-block border-0">
        <div class="accordian-para acc-show p-0">
            <form id="AddEditUser">
                @Html.AntiForgeryToken()
                <input asp-for="Id" type="hidden" />
                <input asp-for="UserGroup" type="hidden" />
                <input asp-for="IsRoleChange" type="hidden">
                <div class="form-row mt-0">
                    <div class="form-group col-md-6">
                        <label>First Name *</label>
                        <input asp-for="FirstName" type="text" class="form-control" data-parsley-required data-parsley-trigger="change" data-parsley-pattern="^[a-zA-Z ]+$">
                    </div>
                    <div class="form-group col-md-6">
                        <label>Last Name *</label>
                        <input asp-for="LastName" type="text" class="form-control" data-parsley-required data-parsley-trigger="change" data-parsley-pattern="^[a-zA-Z ]+$">
                    </div>
                    <div class="form-group col-md-12">
                        <label>Email *</label>
                        @if (Model.Id == 0)
                        {
                            <input asp-for="Email" class="form-control emailval" data-parsley-type="email"
                                   data-parsley-pattern="^([a-z0-9_+\.-]+\@@[\da-z\.-]+\.[a-z\.]{2,6})$"
                                   data-parsley-pattern-message="This field is invalid."
                                   data-parsley-trigger="change"
                                   data-parsley-remote="/Account/CheckUserIsExist"
                                   data-parsley-remote-message="Email already exist."
                                   data-parsley-remote-options='{ "type": "POST", "dataType": "json", "data": { "email": "value" } }'
                                   data-parsley-remote-validator="emailAvailable"
                                   data-parsley-remote-reverse="false"
                                   data-parsley-required="true"
                                   data-parsley-whitespace="false"
                                   data-parsley-required-message="This field is required."
                                   required="required" />
                        }
                        else
                        {
                            <input asp-for="Email" type="text" required data-parsley-trigger="change" class="form-control emailval" readonly="readonly">
                        }
                    </div>
                    <div class="form-group col-md-6">
                        <label>Mobile *</label>
                        <input asp-for="Mobile" type="text" class="form-control" data-mask="999-999-9999" data-parsley-trigger="change" required="">
                    </div>
                    <div class="form-group col-md-6">
                        <label>Role *</label>
                        @Html.DropDownListFor(x => x.Role, ViewBag.RoleList as IEnumerable<SelectListItem>, new { @class = "form-control ", required = "Select Role" })
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>
<div class="modal-footer">
    <button type="button" id="btnSave" class="btn btn-outline-primary con_btn active">Save</button>
    <button type="button" class="btn btn-outline-primary con_btn mr-auto" data-dismiss="modal">Close</button>
</div>
<script src="~/rxfairfrontend/js/jquery.maskedinput.min.js"></script>
<script src="~/rxfairfrontend/js/Parsley.js"></script>
<script type="text/javascript">

    window.InitMaskInput();
    var isSubmitData = false;

    $(document).on("focusout", ".emailval", function (e) {
        var mailtrim = $.trim($(this).val());
        $(this).val(mailtrim);
        $(this).parsley().reset();
    });

    $('#Email').parsley().addAsyncValidator('emailAvailable', function (xhr) {
        return !(xhr.responseJSON.status == 1);
    }, '/Account/CheckUserIsExist');

    $(document).on("change", "#Role", function (e) {
        const role = $.trim($("#Role option:selected").html());
        const dialogMsg = `You are trying to assign ${role}. Note that it will convert your role from ${role} to @ViewBag.GroupName Admin.`;
        if (role === "@User.GetClaimValue(UserClaims.DisplayUserRole)") {
            RxFair.Confirm("Role Change Alert", RxFair.typeModel.Warning, dialogMsg, RxFair.typeModel.Danger, "Yes, do it!",
                function() {
                    $("#IsRoleChange").val(true);
                },
                function() {
                    $("#IsRoleChange").val(false);
                    //$("#Role").val('');
                });
        } else {
            $("#IsRoleChange").val(false);
        }
    });

    function checkRoleStatus(role) {
        var flag = false;
        if (!isSubmitData) {
            const dialogMsg = `You are trying to assign ${role}. Note that it will convert your role from ${role} to @ViewBag.GroupName Admin.`;
            if (role === "@User.GetClaimValue(UserClaims.DisplayUserRole)") {
                RxFair.Confirm("Role Change Alert", RxFair.typeModel.Warning, dialogMsg, RxFair.typeModel.Danger, "Yes, do it!", function () {
                    $("#IsRoleChange").val(true);
                    flag = true;
                    isSubmitData = true;
                },
                    function () {
                        $("#IsRoleChange").val(false);
                        //$("#Role").val('');
                        flag = false;
                    });
            } else {
                $("#IsRoleChange").val(false);
                flag = true;
                isSubmitData = true;
            }
        } else {
            flag = true;
        }
        return flag;
    }

    function submitData() {
        var result = $('#AddEditUser').parsley().validate();
        if (result == null || $("#AddEditUser").parsley().isValid()) {
            $.post("/Account/AddEditUser", $("#AddEditUser").serialize(), function (response) {
                if (response.status === 1) {
                    if ($("#IsRoleChange").val() === "true") {
                        RxFair.SuccessOk("Role Change Alert", "Your role has been changed. Logging out.", function () {
                            logOutUser();
                        });
                    } else {
                        closeModal();
                        RxFair.HandleResponse(response, true, function () {
                            window.BindUserList();
                        });
                    }
                }
                else {
                    RxFair.HandleResponse(response);
                }
            });
        }
    }

    $("#btnSave").click(function () {
        var role = $.trim($("#Role option:selected").html());
        if (checkRoleStatus(role) && isSubmitData) {
            submitData();
        }
    });
</script>